{"version":3,"sources":["Timer/Timer.js","App.js","reportWebVitals.js","index.js"],"names":["Timer","startTime","useState","time","setTime","isActive","setIsActive","useEffect","interval","setInterval","clearInterval","className","s","sec","parseInt","min","hour","hourMinSec","onClick","onDoubleClick","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0MAmEeA,G,MAhED,SAAC,GAAiB,IAAhBC,EAAe,EAAfA,UAAe,EACLC,mBAASD,GADJ,mBACtBE,EADsB,KAChBC,EADgB,OAEGF,oBAAS,GAFZ,mBAEtBG,EAFsB,KAEZC,EAFY,KA4C7B,OAtBEC,qBAAU,WACN,IAAIC,EAAW,KAMf,OALIH,IACAG,EAAWC,aAAY,WACvBL,GAAQ,SAAAD,GAAI,OAAIA,EAAO,SAGpB,kBAAMO,cAAcF,MAC5B,CAACH,EAAUF,EAAMF,IAepB,sBAAKU,UAAU,MAAf,UACE,qBAAKA,UAAU,OAAf,SAdF,SAAoBC,GAChB,IAAIC,EAAMC,SAAUF,EAAI,IAAQ,IAC5BG,EAAMD,SAAUF,EAAC,IAAkB,IACnCI,EAAOF,SAAUF,EAAC,KAAuB,IAM7C,OAFAI,EAAQA,EAAO,GAAM,IAAMA,EAAOA,GAEpB,KAHdD,EAAOA,EAAM,GAAM,IAAMA,EAAMA,GAGL,KAJ1BF,EAAOA,EAAM,GAAM,IAAMA,EAAMA,GAU9BI,CAAWd,KAEd,sBAAKQ,UAAU,MAAf,UACE,wBAAQA,UAAS,gCAA2BN,EAAW,SAAW,YAAca,QAASb,EA1C/F,WACID,EAAQH,GACRK,GAAaD,IANjB,WACEC,GAAaD,IA6CT,SACGA,EAAW,OAAS,UAEvB,wBAAQM,UAAU,SAASQ,cAxCjC,WACIb,GAAY,IAuCV,kBAGA,wBAAQK,UAAU,SAASO,QAvCjC,WACEd,EAAQH,GACRK,GAAY,IAqCR,2BChDOc,MARf,WACI,OACI,8BACI,cAAC,EAAD,CAAOnB,UAAW,UCMfoB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.1f5f8a0c.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport \"./Timer.css\";\r\n\r\nconst Timer = ({startTime}) => {\r\n  const [time, setTime] = useState(startTime);\r\n  const [isActive, setIsActive] = useState(false);\r\n\r\n  function start() {\r\n    setIsActive(!isActive);\r\n  }\r\n\r\n  function stop() {\r\n      setTime(startTime);\r\n      setIsActive(!isActive);\r\n    }\r\n\r\n  function wait() {\r\n      setIsActive(false);\r\n    }\r\n\r\n  function reset() {\r\n    setTime(startTime);\r\n    setIsActive(true);\r\n  }\r\n\r\n    useEffect(() => {\r\n        let interval = null;\r\n        if (isActive) {\r\n            interval = setInterval(() => {\r\n            setTime(time => time + 2);\r\n            });\r\n        }\r\n        return () => clearInterval(interval);\r\n    }, [isActive, time, startTime]);\r\n\r\n    function hourMinSec(s) {\r\n        let sec = parseInt((s / 1000) % 60),\r\n            min = parseInt((s / (1000 * 60)) % 60),\r\n            hour = parseInt((s / (1000 * 60 * 60)) % 24)\r\n\r\n        sec = (sec < 10) ? '0' + sec : sec;\r\n        min = (min < 10) ? '0' + min : min;\r\n        hour = (hour < 10) ? '0' + hour : hour;\r\n\r\n        return hour + ':' + min + ':' + sec;\r\n    }\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <div className=\"time\">\r\n        {hourMinSec(time)}\r\n      </div>\r\n      <div className=\"row\">\r\n        <button className={`button button-primary-${isActive ? 'active' : 'inactive'}`} onClick={isActive ? stop : start}>\r\n          {isActive ? 'Stop' : 'Start'}\r\n        </button>\r\n        <button className=\"button\" onDoubleClick={wait}>\r\n                  Wait\r\n            </button>\r\n        <button className=\"button\" onClick={reset}>\r\n          Reset\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Timer;","import React from 'react';\nimport Timer from \"./Timer/Timer.js\";\n\nfunction App() {\n    return (\n        <div>\n            <Timer startTime={3600000} />\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}